{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"List The Docs List The Docs allows to collect the documentation of projects hosted in different servers in the same page. List The Docs does not (actually) provides documentation hosting, but it offer only a web page with a nice list of project and documentation links. This work has been started from Host the Docs , but has lead to a complete rewrite of the code and the aim of the project. The project is written in Python using Flask.","title":"Home"},{"location":"#list-the-docs","text":"List The Docs allows to collect the documentation of projects hosted in different servers in the same page. List The Docs does not (actually) provides documentation hosting, but it offer only a web page with a nice list of project and documentation links. This work has been started from Host the Docs , but has lead to a complete rewrite of the code and the aim of the project. The project is written in Python using Flask.","title":"List The Docs"},{"location":"getting_started/","text":"Getting Started Since List The Docs is writte using Flask it can be execute with the follwing commands: export FLASK_APP = listthedocs flask run * Running on http : // 127 . 0 . 0 . 1 : 5000 / For Windows commandline use: set FLASK_APP = listthedocs And for Windows Powershell use: $ env : FLASK_APP = \"listthedocs\" Configuration The service can be configured with a Python file 'config.py' that can be placed in the app \"instance_path\" . The instance_path can be customized by setting the INSTANCE_PATH to an absolute path. The configuration is loaded from the 'config.py' in the instance_path : DATABASE : The path to the SQLite database. Defualt to instance_path/listthedocs.sqlite . COPYRIGHT : The copyright footer message. HTML is allowed. TITLE : The title of the web pages. HEADER : The header of the web page. HTML is allowed. READONLY : Set to true to disable the write REST APIs. Usage The service provides a set of REST APIs to manage projects and versions. Build and Host documentation Before using the APIs, you should build the documentation (e.g. with Sphinx, MkDocs, Doxygen, ...) and host it on a web server. List The Docs does not actuallt provides docuemntation hosting services. Collect documentations in List The Docs After deploying a (new) project documentation on a hosting service, you can visualize it in List The Docs: Add the project (if not already present) Add the version to the project Add a project to List The Docs Adding a project to List The Docs can be done using the following REST API: import requests requests . post ( 'http://localhost:5000/api/v1/projects' , json = { 'name' : 'project-name' , 'description' : 'The description of the project' , } ) Add a documentation version link to List The Docs Adding a version for a project documentation to List The Docs can be done using the following REST API: import requests requests . post ( 'http://localhost:5000/api/v1/projects/<project-name>/versions' , json = { 'name' : '1.0.0' , 'url' : 'http://www.example.com/doc/1.0.0/index.html' , } ) Python Client To simplify the management of the projects, List The Docs provides a simple Python client: from listthedocs.client import ListTheDocs , Project , Version client = ListTheDocs () client . add_project ( Project ( 'project-name' , 'description' )) client . add_version ( 'project-name' , Version ( '1.0.0' , 'http://www.example.com/doc/1.0.0/index.html' ) )","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"Since List The Docs is writte using Flask it can be execute with the follwing commands: export FLASK_APP = listthedocs flask run * Running on http : // 127 . 0 . 0 . 1 : 5000 / For Windows commandline use: set FLASK_APP = listthedocs And for Windows Powershell use: $ env : FLASK_APP = \"listthedocs\"","title":"Getting Started"},{"location":"getting_started/#configuration","text":"The service can be configured with a Python file 'config.py' that can be placed in the app \"instance_path\" . The instance_path can be customized by setting the INSTANCE_PATH to an absolute path. The configuration is loaded from the 'config.py' in the instance_path : DATABASE : The path to the SQLite database. Defualt to instance_path/listthedocs.sqlite . COPYRIGHT : The copyright footer message. HTML is allowed. TITLE : The title of the web pages. HEADER : The header of the web page. HTML is allowed. READONLY : Set to true to disable the write REST APIs.","title":"Configuration"},{"location":"getting_started/#usage","text":"The service provides a set of REST APIs to manage projects and versions.","title":"Usage"},{"location":"getting_started/#build-and-host-documentation","text":"Before using the APIs, you should build the documentation (e.g. with Sphinx, MkDocs, Doxygen, ...) and host it on a web server. List The Docs does not actuallt provides docuemntation hosting services.","title":"Build and Host documentation"},{"location":"getting_started/#collect-documentations-in-list-the-docs","text":"After deploying a (new) project documentation on a hosting service, you can visualize it in List The Docs: Add the project (if not already present) Add the version to the project","title":"Collect documentations in List The Docs"},{"location":"getting_started/#add-a-project-to-list-the-docs","text":"Adding a project to List The Docs can be done using the following REST API: import requests requests . post ( 'http://localhost:5000/api/v1/projects' , json = { 'name' : 'project-name' , 'description' : 'The description of the project' , } )","title":"Add a project to List The Docs"},{"location":"getting_started/#add-a-documentation-version-link-to-list-the-docs","text":"Adding a version for a project documentation to List The Docs can be done using the following REST API: import requests requests . post ( 'http://localhost:5000/api/v1/projects/<project-name>/versions' , json = { 'name' : '1.0.0' , 'url' : 'http://www.example.com/doc/1.0.0/index.html' , } )","title":"Add a documentation version link to List The Docs"},{"location":"getting_started/#python-client","text":"To simplify the management of the projects, List The Docs provides a simple Python client: from listthedocs.client import ListTheDocs , Project , Version client = ListTheDocs () client . add_project ( Project ( 'project-name' , 'description' )) client . add_version ( 'project-name' , Version ( '1.0.0' , 'http://www.example.com/doc/1.0.0/index.html' ) )","title":"Python Client"},{"location":"python_client/","text":"Python Client To simplify the interaction with the rest APIs, List The Docs provides a Python client. The following line will load it and its entities. from listthedocs.client import ListTheDocs , Project , Version Entities The Python client defines two entities: Project and Version . Project The Project entity has the following fields: Field Type Description name str The name of the project description str The description of the project. Custom HTML is allowed. logo str The Logo of the project (optional). versions tuple[Version] The list of docuemntation versions Tip The logo field contains a string that can be used inside the src attribute of an HTML img tag. E.g.: http://www.example.com/logo.png : A link to an image data:image/png;base64,<BASE64 of the image file> : The image itself Version The Version entity has the following fields: Field Type Description name str The name of the docuemtation version (e.g. 1.0.0 ). url str The url to the to the documentation files. Client The ListTheDocs class defines all the functions needed to manage the Project and Version entities. Adding a Project The following code will add a project: from listthedocs.client import ListTheDocs , Project # Instantiate the client with default service location client = ListTheDocs () # Add a project project = client . add_project ( Project ( 'Project-Name' , 'A long description' )) print ( project ) Reading a Project The following code will read a project named Project-Name : from listthedocs.client import ListTheDocs , Project # Instantiate the client with default service location client = ListTheDocs () # Read a project project = client . get_project ( 'Project-Name' ) print ( project ) Reading all the Projects The following code will read all the projects: from listthedocs.client import ListTheDocs , Project # Instantiate the client with default service location client = ListTheDocs () # Read all the projects projects = client . get_projects () print ( projects ) Updating a Project It is possible to update the description or the logo of a Project using the following code: from listthedocs.client import ListTheDocs , Project # Instantiate the client with default service location client = ListTheDocs () project = # ... Create Project-Name project # update both logo and description project = client . update_project ( 'Project-Name' , description = 'new description' , logo = 'http://www.example.com/log.png' ) print ( projects ) Removing a Project It is possible to remove a Project (and all its versions) using the following code: from listthedocs.client import ListTheDocs , Project # Instantiate the client with default service location client = ListTheDocs () project = # ... Create Project-Name project # Remove the project project = client . delete_project ( 'Project-Name' ) Adding a new documentation Version to a Project The following code will add a new documentation version to the Project-Name project: from listthedocs.client import ListTheDocs , Project , Version # Instantiate the client with default service location client = ListTheDocs () project = # ... Create Project-Name project # Add a project version project = client . add_version ( 'Project-Name' , Version ( '1.0.0' , 'http://www.example.com/doc/1.0.0/index.html' ) ) Each Project can have multiple documentation versions. Updating a documentation Version After adding a documentation version to a Project, it is possible to update it (e.g. in case documentation has been moved to a different URL). The name field can't be changed. The following code will update the documentation URL: from listthedocs.client import ListTheDocs , Project , Version # Instantiate the client with default service location client = ListTheDocs () project = # ... Create Project-Name project project = # ... Add a project version 1.0.0 # Update the project version URL project = client . update_version ( 'Project-Name' , '1.0.0' , url = 'http://www.example.com/new_doc/1.0.0/index.html' ) Removing a Version from a Project It is possible to remove a Version from a Project using the following code: from listthedocs.client import ListTheDocs , Project , Version # Instantiate the client with default service location client = ListTheDocs () project = # ... Create Project-Name project project = # ... Add a project version 1.0.0 # Delete project version project = client . delete_version ( 'Project-Name' , '1.0.0' )","title":"Python Client"},{"location":"python_client/#python-client","text":"To simplify the interaction with the rest APIs, List The Docs provides a Python client. The following line will load it and its entities. from listthedocs.client import ListTheDocs , Project , Version","title":"Python Client"},{"location":"python_client/#entities","text":"The Python client defines two entities: Project and Version .","title":"Entities"},{"location":"python_client/#project","text":"The Project entity has the following fields: Field Type Description name str The name of the project description str The description of the project. Custom HTML is allowed. logo str The Logo of the project (optional). versions tuple[Version] The list of docuemntation versions Tip The logo field contains a string that can be used inside the src attribute of an HTML img tag. E.g.: http://www.example.com/logo.png : A link to an image data:image/png;base64,<BASE64 of the image file> : The image itself","title":"Project"},{"location":"python_client/#version","text":"The Version entity has the following fields: Field Type Description name str The name of the docuemtation version (e.g. 1.0.0 ). url str The url to the to the documentation files.","title":"Version"},{"location":"python_client/#client","text":"The ListTheDocs class defines all the functions needed to manage the Project and Version entities.","title":"Client"},{"location":"python_client/#adding-a-project","text":"The following code will add a project: from listthedocs.client import ListTheDocs , Project # Instantiate the client with default service location client = ListTheDocs () # Add a project project = client . add_project ( Project ( 'Project-Name' , 'A long description' )) print ( project )","title":"Adding a Project"},{"location":"python_client/#reading-a-project","text":"The following code will read a project named Project-Name : from listthedocs.client import ListTheDocs , Project # Instantiate the client with default service location client = ListTheDocs () # Read a project project = client . get_project ( 'Project-Name' ) print ( project )","title":"Reading a Project"},{"location":"python_client/#reading-all-the-projects","text":"The following code will read all the projects: from listthedocs.client import ListTheDocs , Project # Instantiate the client with default service location client = ListTheDocs () # Read all the projects projects = client . get_projects () print ( projects )","title":"Reading all the Projects"},{"location":"python_client/#updating-a-project","text":"It is possible to update the description or the logo of a Project using the following code: from listthedocs.client import ListTheDocs , Project # Instantiate the client with default service location client = ListTheDocs () project = # ... Create Project-Name project # update both logo and description project = client . update_project ( 'Project-Name' , description = 'new description' , logo = 'http://www.example.com/log.png' ) print ( projects )","title":"Updating a Project"},{"location":"python_client/#removing-a-project","text":"It is possible to remove a Project (and all its versions) using the following code: from listthedocs.client import ListTheDocs , Project # Instantiate the client with default service location client = ListTheDocs () project = # ... Create Project-Name project # Remove the project project = client . delete_project ( 'Project-Name' )","title":"Removing a Project"},{"location":"python_client/#adding-a-new-documentation-version-to-a-project","text":"The following code will add a new documentation version to the Project-Name project: from listthedocs.client import ListTheDocs , Project , Version # Instantiate the client with default service location client = ListTheDocs () project = # ... Create Project-Name project # Add a project version project = client . add_version ( 'Project-Name' , Version ( '1.0.0' , 'http://www.example.com/doc/1.0.0/index.html' ) ) Each Project can have multiple documentation versions.","title":"Adding a new documentation Version to a Project"},{"location":"python_client/#updating-a-documentation-version","text":"After adding a documentation version to a Project, it is possible to update it (e.g. in case documentation has been moved to a different URL). The name field can't be changed. The following code will update the documentation URL: from listthedocs.client import ListTheDocs , Project , Version # Instantiate the client with default service location client = ListTheDocs () project = # ... Create Project-Name project project = # ... Add a project version 1.0.0 # Update the project version URL project = client . update_version ( 'Project-Name' , '1.0.0' , url = 'http://www.example.com/new_doc/1.0.0/index.html' )","title":"Updating a documentation Version"},{"location":"python_client/#removing-a-version-from-a-project","text":"It is possible to remove a Version from a Project using the following code: from listthedocs.client import ListTheDocs , Project , Version # Instantiate the client with default service location client = ListTheDocs () project = # ... Create Project-Name project project = # ... Add a project version 1.0.0 # Delete project version project = client . delete_version ( 'Project-Name' , '1.0.0' )","title":"Removing a Version from a Project"},{"location":"rest_api/","text":"Rest APIs List The Docs provides a set of REST APIs to manage the projects and the docuemntation versions. Currently there is no authorization control, so anybody can interact with these APIs. Project Adding a Project The following call will add a project: POST /api/v1/projects HTTP / 1.1 Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"A not too long description of the project\" , \"logo\" : \"http://www.projectname.com/logo.png\" } Field Type Description name str The name of the project description str The description of the project. Custom HTML is allowed. logo str The Logo of the project (optional). The logo field is optional. The response has the following format: HTTP / 1.1 201 Created Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"A not too long description of the project\" , \"logo\" : \"http://www.projectname.com/logo.png\" , \"versions\" : [] } Reading a Project The following call will read a project named Project-Name : GET /api/v1/projects/Project-Name HTTP / 1.1 If the project exists, the following response will returns: HTTP / 1.1 200 Ok Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"A not too long description of the project\" , \"logo\" : \"http://www.projectname.com/logo.png\" , \"versions\" : [] } If the project does not exists, a 404 response code will be returned. Reading all the Projects The following call will read all the projects: GET /api/v1/projects HTTP / 1.1 The following response will returns: HTTP / 1.1 200 Ok Content-Type : application/json [ { \"name\" : \"Project-Name-1\" , \"description\" : \"A not too long description of the project 1\" , \"logo\" : \"http://www.projectname1.com/logo.png\" , \"versions\" : [] }, { \"name\" : \"Project-Name-2\" , \"description\" : \"A not too long description of the project 2\" , \"logo\" : \"http://www.projectname2.com/logo.png\" , \"versions\" : [] } ] Updating a Project It is possible to update the description or the logo of a Project using the following call: PATCH /api/v1/projects/Project-Name HTTP / 1.1 Content-Type : application/json { \"description\" : \"An optional new description\" , \"logo\" : \"http://www.projectname.com/an-optional-new-logo.png\" } It is possible to update only the logo or only the description . The response has the following format: HTTP / 1.1 200 Ok Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"An optional new description\" , \"logo\" : \"http://www.projectname.com/an-optional-new-logo.png\" , \"versions\" : [] } Removing a Project It is possible to remove a Project (and all its versions) using the following call: DELETE /api/v1/projects/Project-Name HTTP / 1.1 The response has the following format: HTTP / 1.1 200 Ok Project Documentation Version Adding a new documentation Version to a Project The following call will add a new documentation version to the Project-Name project: POST /api/v1/projects/Project-Name/versions HTTP / 1.1 Content-Type : application/json { \"name\" : \"1.0.0\" , \"url\" : \"https://www.example.com/doc/1.0.0/\" } Field Type Description name str The name of the docuemtation version (e.g. 1.0.0 ). url str The url to the to the documentation files. The response has the following format: HTTP / 1.1 201 Created Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"A not too long description of the project\" , \"logo\" : \"http://www.projectname.com/logo.png\" , \"versions\" : [ { \"name\" : \"1.0.0\" , \"url\" : \"https://www.example.com/doc/1.0.0/\" } ] } Each Project can have multiple documentation versions. Updating a documentation Version After adding a documentation version to a Project, it is possible to update it (e.g. in case documentation has been moved to a different URL). The name field can't be changed. The following call will update the documentation URL: PATCH /api/v1/projects/Project-Name/versions/1.0.0 HTTP / 1.1 Content-Type : application/json { \"url\" : \"https://www.projectname.com/doc/1.0.0/\" } The response has the following format: HTTP / 1.1 200 Ok Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"A not too long description of the project\" , \"logo\" : \"http://www.projectname.com/logo.png\" , \"versions\" : [ { \"name\" : \"1.0.0\" , \"url\" : \"https://www.projectname.com/doc/1.0.0/\" } ] } Removing a Version from a Project It is possible to remove a Version from a Project using the following call: DELETE /api/v1/projects/Project-Name/versions/1.0.0 HTTP / 1.1 The response has the following format: HTTP / 1.1 200 Ok Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"A not too long description of the project\" , \"logo\" : \"http://www.projectname.com/logo.png\" , \"versions\" : [] }","title":"REST APIs"},{"location":"rest_api/#rest-apis","text":"List The Docs provides a set of REST APIs to manage the projects and the docuemntation versions. Currently there is no authorization control, so anybody can interact with these APIs.","title":"Rest APIs"},{"location":"rest_api/#project","text":"","title":"Project"},{"location":"rest_api/#adding-a-project","text":"The following call will add a project: POST /api/v1/projects HTTP / 1.1 Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"A not too long description of the project\" , \"logo\" : \"http://www.projectname.com/logo.png\" } Field Type Description name str The name of the project description str The description of the project. Custom HTML is allowed. logo str The Logo of the project (optional). The logo field is optional. The response has the following format: HTTP / 1.1 201 Created Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"A not too long description of the project\" , \"logo\" : \"http://www.projectname.com/logo.png\" , \"versions\" : [] }","title":"Adding a Project"},{"location":"rest_api/#reading-a-project","text":"The following call will read a project named Project-Name : GET /api/v1/projects/Project-Name HTTP / 1.1 If the project exists, the following response will returns: HTTP / 1.1 200 Ok Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"A not too long description of the project\" , \"logo\" : \"http://www.projectname.com/logo.png\" , \"versions\" : [] } If the project does not exists, a 404 response code will be returned.","title":"Reading a Project"},{"location":"rest_api/#reading-all-the-projects","text":"The following call will read all the projects: GET /api/v1/projects HTTP / 1.1 The following response will returns: HTTP / 1.1 200 Ok Content-Type : application/json [ { \"name\" : \"Project-Name-1\" , \"description\" : \"A not too long description of the project 1\" , \"logo\" : \"http://www.projectname1.com/logo.png\" , \"versions\" : [] }, { \"name\" : \"Project-Name-2\" , \"description\" : \"A not too long description of the project 2\" , \"logo\" : \"http://www.projectname2.com/logo.png\" , \"versions\" : [] } ]","title":"Reading all the Projects"},{"location":"rest_api/#updating-a-project","text":"It is possible to update the description or the logo of a Project using the following call: PATCH /api/v1/projects/Project-Name HTTP / 1.1 Content-Type : application/json { \"description\" : \"An optional new description\" , \"logo\" : \"http://www.projectname.com/an-optional-new-logo.png\" } It is possible to update only the logo or only the description . The response has the following format: HTTP / 1.1 200 Ok Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"An optional new description\" , \"logo\" : \"http://www.projectname.com/an-optional-new-logo.png\" , \"versions\" : [] }","title":"Updating a Project"},{"location":"rest_api/#removing-a-project","text":"It is possible to remove a Project (and all its versions) using the following call: DELETE /api/v1/projects/Project-Name HTTP / 1.1 The response has the following format: HTTP / 1.1 200 Ok","title":"Removing a Project"},{"location":"rest_api/#project-documentation-version","text":"","title":"Project Documentation Version"},{"location":"rest_api/#adding-a-new-documentation-version-to-a-project","text":"The following call will add a new documentation version to the Project-Name project: POST /api/v1/projects/Project-Name/versions HTTP / 1.1 Content-Type : application/json { \"name\" : \"1.0.0\" , \"url\" : \"https://www.example.com/doc/1.0.0/\" } Field Type Description name str The name of the docuemtation version (e.g. 1.0.0 ). url str The url to the to the documentation files. The response has the following format: HTTP / 1.1 201 Created Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"A not too long description of the project\" , \"logo\" : \"http://www.projectname.com/logo.png\" , \"versions\" : [ { \"name\" : \"1.0.0\" , \"url\" : \"https://www.example.com/doc/1.0.0/\" } ] } Each Project can have multiple documentation versions.","title":"Adding a new documentation Version to a Project"},{"location":"rest_api/#updating-a-documentation-version","text":"After adding a documentation version to a Project, it is possible to update it (e.g. in case documentation has been moved to a different URL). The name field can't be changed. The following call will update the documentation URL: PATCH /api/v1/projects/Project-Name/versions/1.0.0 HTTP / 1.1 Content-Type : application/json { \"url\" : \"https://www.projectname.com/doc/1.0.0/\" } The response has the following format: HTTP / 1.1 200 Ok Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"A not too long description of the project\" , \"logo\" : \"http://www.projectname.com/logo.png\" , \"versions\" : [ { \"name\" : \"1.0.0\" , \"url\" : \"https://www.projectname.com/doc/1.0.0/\" } ] }","title":"Updating a documentation Version"},{"location":"rest_api/#removing-a-version-from-a-project","text":"It is possible to remove a Version from a Project using the following call: DELETE /api/v1/projects/Project-Name/versions/1.0.0 HTTP / 1.1 The response has the following format: HTTP / 1.1 200 Ok Content-Type : application/json { \"name\" : \"Project-Name\" , \"description\" : \"A not too long description of the project\" , \"logo\" : \"http://www.projectname.com/logo.png\" , \"versions\" : [] }","title":"Removing a Version from a Project"},{"location":"about/license/","text":"The List The Doc License (MIT) Copyright (c) 2019 Alessandro Bacchini Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#the-list-the-doc-license-mit","text":"Copyright (c) 2019 Alessandro Bacchini Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The List The Doc License (MIT)"}]}